package(ISLR)
library(tidyverse)
library(tidyverse)
library(tidyverse)
head(college)
install.packages("ISLR")
college -> ISLR::College
ISLR::College -> college
head(college)
?college
??college
range(college)
nrow(college)
head(college)
install.packages("ISLR")
college <- ISLR::College
head(college)
View(college)
install.packages("tidyverse")
library(tidyverse)
install.packages('ISLR')
install.packages("ISLR")
college <- ISLR::College
head(college)
install.packages("tidyverse")
college <- ISLR::College
head(college)
library(ggplot2)
install.packages('ISLR')
install.packages("ISLR")
```{r}
install.packages("ISLR")
Welche Hochschule bekommt die meisten Applications?
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
install.packages("ggplot2")
install.packages("ggplot2")
library('ggthemes')
install.packages("ggthemes")
library(ggthemes)
install.packages("scales")
install.packages("scales")
install.packages("dplyr")
install.packages("mice")
install.packages("randomForest")
library('randomForest') # classification algorithm
#check data
str(full)
#check data
head(train)
train <- read.csv('/Users/thomasjager/Developer/R/data/train.csv', stringsAsFactors = F)
test <- read.csv('/Users/thomasjager/Developer/R/data/test.csv')
#check data
str(full)
#check data
#str(full)
full <- bind_rows(train, test) # bind training & test data
library('ggplot2')      # visualization
library('ggthemes')     # visualization
library('scales')       # visualization
library('dplyr')        # data manipulation
library('mice')         # imputatation
train <- read.csv('/Users/thomasjager/Developer/R/data/train.csv' , stringsAsFactors = F)
test <- read.csv('/Users/thomasjager/Developer/R/data/test.csv', stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
library('ggthemes')     # visualization
library('scales')       # visualization
library('dplyr')        # data manipulation
library('lattice')         # imputatation
train <- read.csv('/Users/thomasjager/Developer/R/data/train.csv' , stringsAsFactors = F)
test <- read.csv('/Users/thomasjager/Developer/R/data/test.csv', stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
library('ggthemes')     # visualization
library('scales')       # visualization
library('dplyr')        # data manipulation
library('lattice')      # imputation
library('mice')
library('tidyverse')
train <- read.csv('/Users/thomasjager/Developer/R/data/train.csv' , stringsAsFactors = F)
test <- read.csv('/Users/thomasjager/Developer/R/data/test.csv', stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
setwd("~/Documents/GitHub/VDA---Sommersemester-2019-Projektarbeit/scripts")
library(tidyverse)
### 1. Voraussetzung
We are two students
---
title: "R Notebook"
output: html_notebook
---
### 1. Voraussetzung
We are two students
### 2. Ausgangsituation
### 3. Unsere Ziele
library(tidyverse)
---
title: "R Notebook"
output: html_notebook
---
### 1. Voraussetzung
We are two students
We are two students
library(tidyverse)
---
title: "R Notebook"
output: html_notebook
---
### Aussgangssituation
library(tidyverse)
library(tidyverse)
data <- read_csv(data/master.csv)
master <- read.csv("~/Documents/GitHub/VDA---Sommersemester-2019-Projektarbeit/data/master.csv", header=FALSE)
View(master)
data <- read_csv(master)
data <- read_csv("master")
str(master)
glimpse(master)
str(master)
head(master)
View(master)
View(master)
View(master)
View(master)
# Tidy data
# HDI for year (zu viele fehlende Werte), suicides/100k pop (falsche Werte?!)
master <- master %>%
select(-c('HDI for year','suicides/100k pop')) %>%
# Tidy data
# HDI for year (zu viele fehlende Werte), suicides/100k pop (falsche Werte?!)
master <- master %>%
select(-c(`HDI for year`,`suicides/100k pop`)) %>%
# Tidy data
# HDI for year (zu viele fehlende Werte), suicides/100k pop (falsche Werte?!)
master <- master %>%
select(-c(`HDI for year`, `suicides/100k pop`)) %>%
# Tidy data
# HDI for year (zu viele fehlende Werte), suicides/100k pop (falsche Werte?!)
master %>%
select(-c(`HDI for year`, `suicides/100k pop`)) %>%
data %>%
group_by(year) %>%
summarize(population = sum(population),
suicides = sum(suicides_no),
suicides_per_100k = (suicides / population) * 100000) %>%
ggplot(aes(x = year, y = suicides_per_100k)) +
geom_line(col = "deepskyblue3", size = 1) +
geom_point(col = "deepskyblue3", size = 2) +
geom_hline(yintercept = global_average, linetype = 2, color = "grey35", size = 1) +
labs(title = "Global Suicides (per 100k)",
subtitle = "Trend over time, 1985 - 2015.",
x = "Year",
y = "Suicides per 100k") +
scale_x_continuous(breaks = seq(1985, 2015, 2)) +
scale_y_continuous(breaks = seq(10, 20))
library(tidyverse)
library(countrycode)
# load data
data <- read_csv("../data/master.csv")
# data cleaning
# entfernen der Spalten HDI for year und suicides/100k pop
# umbennen der anderern Spalten
data <- data %>%
select(-c(`HDI for year`, `suicides/100k pop`)) %>%
rename(gdp_for_year = `gdp_for_year ($)`,
gdp_per_capita = `gdp_per_capita ($)`,
country_year = `country-year`) %>%
as.data.frame()
# das Jahr 2016 aus data werfen
data <- data %>%
filter(year != 2016) %>%
select(-country_year)
# Jahre mit <= 3 Jahren von Daten rauswerfen
minimum_years <- data %>%
group_by(country) %>%
summarize(rows = n(),
years = rows / 12) %>%
arrange(years)
data <- data %>%
filter(!(country %in% head(minimum_years$country, 7)))
# das datenset ein wenig kleiner machen
# ausschließen von "year", um die variable ordinal zu machen
data$age <- gsub(" years", "", data$age)        # gsub um Strings zu replacen
data$sex <- ifelse(data$sex == "male", "Male", "Female")
# continent data
data$continent <- countrycode(sourcevar = data[, "country"],
origin = "country.name",
destination = "continent")
# nominale daten (country, sex, continent)
data_nominal <- c('country','sex','continent')
data[data_nominal] <- lapply(data[data_nominal], function(x){factor(x)})
# ordinale daten (alter, generation)
data$age <- factor(data$age,
ordered = T,
levels = c("5-14",
"15-24",
"25-34",
"35-54",
"55-74",
"75+"))
# generation ordinal
data$generation <- factor(data$generation,
ordered = T,
levels = c("G.I. Generation",
"Silent",
"Boomers",
"Generation X",
"Millenials",
"Generation Z"))
data <- as_tibble(data)  # TO-DO as_tibble erklären
# global average
global_average <- (sum(as.numeric(data$suicides_no)) / sum(as.numeric(data$population))) * 100000
# die finalen daten anschauen
glimpse(data)
data %>%
group_by(year) %>%
summarize(population = sum(population),
suicides = sum(suicides_no),
suicides_per_100k = (suicides / population) * 100000) %>%
ggplot(aes(x = year, y = suicides_per_100k)) +
geom_line(col = "deepskyblue3", size = 1) +
geom_point(col = "deepskyblue3", size = 2) +
geom_hline(yintercept = global_average, linetype = 2, color = "grey35", size = 1) +
labs(title = "Global Suicides (per 100k)",
subtitle = "Trend over time, 1985 - 2015.",
x = "Year",
y = "Suicides per 100k") +
scale_x_continuous(breaks = seq(1985, 2015, 2)) +
scale_y_continuous(breaks = seq(10, 20))
library(tidyverse)
library(countrycode)   # um Kontinente zu erzeugen
library(grid)
library(lattice)
# load data
data <- read_csv("../data/master.csv")
# data cleaning
# entfernen der Spalte HDI for year
# umbennen der anderern Spalten
data <- data %>%
select(-c(`HDI for year`, `suicides/100k pop`)) %>%
rename(gdp_for_year = `gdp_for_year ($)`,
gdp_per_capita = `gdp_per_capita ($)`,
country_year = `country-year`) %>%
as.data.frame()
# das Jahr 2016 aus data werfen
data <- data %>%
filter(year != 2016) %>% # I therefore exclude 2016 data
select(-country_year)
# Jahre mit <= 3 Jahren von Daten rauswerfen
minimum_years <- data %>%
group_by(country) %>%
summarize(rows = n(),
years = rows / 12) %>%
arrange(years)
data <- data %>%
filter(!(country %in% head(minimum_years$country, 7)))
# das datenset ein wenig kleiner machen
data$age <- gsub(" years", "", data$age)        # gsub um Strings zu replacen
data$sex <- ifelse(data$sex == "male", "Male", "Female")
# continent data
data$continent <- countrycode(sourcevar = data[, "country"],
origin = "country.name",
destination = "continent")
# nominale daten (country, sex, continent)
data_nominal <- c('country','sex','continent')
data[data_nominal] <- lapply(data[data_nominal], function(x){factor(x)})
# ordinale daten (alter, generation)
data$age <- factor(data$age,
ordered = T,
levels = c("5-14",
"15-24",
"25-34",
"35-54",
"55-74",
"75+"))
# generation ordinal
data$generation <- factor(data$generation,
ordered = T,
levels = c("G.I. Generation",
"Silent",
"Boomers",
"Generation X",
"Millenials",
"Generation Z"))
data <- as_tibble(data)  # TO-DO as_tibble erklären
# global average
global_average <- (sum(as.numeric(data$suicides_no)) / sum(as.numeric(data$population))) * 100000
# die finalen daten anschauen
glimpse(data)
data %>%
group_by(year) %>%
summarize(population = sum(population),
suicides = sum(suicides_no),
suicides_per_100k = (suicides / population) * 100000) %>%
ggplot(aes(x = year, y = suicides_per_100k)) +
geom_line(col = "deepskyblue3", size = 1) +
geom_point(col = "deepskyblue3", size = 2) +
geom_hline(yintercept = global_average, linetype = 2, color = "grey35", size = 1) +     # global average als gedoddete linie
labs(title = "Global Suicides (per 100k)",
subtitle = "Trend over time, 1985 - 2015.",
x = "Year",
y = "Suicides per 100k Population") +
scale_x_continuous(breaks = seq(1985, 2015, 2)) +
scale_y_continuous(breaks = seq(10, 20))
continent <- data %>%
group_by(continent) %>%
summarize(suicide_per_100k = (sum(as.numeric(suicides_no)) / sum(as.numeric(population))) * 100000) %>%
arrange(suicide_per_100k)
continent$continent <- factor(continent$continent, ordered = T, levels = continent$continent)
continent_plot <- ggplot(continent, aes(x = continent, y = suicide_per_100k, fill = continent)) +
geom_bar(stat = "identity") +
labs(title = "Global Suicides (per 100k), by Continent",
x = "Continent",
y = "Suicides per 100k",
fill = "Continent") +
theme(legend.position = "none", title = element_text(size = 10)) +
scale_y_continuous(breaks = seq(0, 20, 1), minor_breaks = F)
continent_time <- data %>%
group_by(year, continent) %>%
summarize(suicide_per_100k = (sum(as.numeric(suicides_no)) / sum(as.numeric(population))) * 100000)
continent_time$continent <- factor(continent_time$continent, ordered = T, levels = continent$continent)
continent_time_plot <- ggplot(continent_time, aes(x = year, y = suicide_per_100k, col = factor(continent))) +
facet_grid(continent ~ ., scales = "free_y") +
geom_line() +
geom_point() +
labs(title = "Trends Over Time, by Continent",
x = "Year",
y = "Suicides per 100k",
color = "Continent") +
theme(legend.position = "none", title = element_text(size = 10)) +
scale_x_continuous(breaks = seq(1985, 2015, 5), minor_breaks = F)
continent_plot
continent_time_plot
sex_plot <- data %>%
group_by(sex) %>%
summarize(suicide_per_100k = (sum(as.numeric(suicides_no)) / sum(as.numeric(population))) * 100000) %>%
ggplot(aes(x = sex, y = suicide_per_100k, fill = sex)) +
geom_bar(stat = "identity") +
labs(title = "Global suicides (per 100k), by Sex",
x = "Sex",
y = "Suicides per 100k") +
theme(legend.position = "none") +
scale_y_continuous(breaks = seq(0, 25), minor_breaks = F)
sex_time_plot <- data %>%
group_by(year, sex) %>%
summarize(suicide_per_100k = (sum(as.numeric(suicides_no)) / sum(as.numeric(population))) * 100000) %>%
ggplot(aes(x = year, y = suicide_per_100k, col = factor(sex))) +
facet_grid(sex ~ ., scales = "free_y") +
geom_line() +
geom_point() +
labs(title = "Trends Over Time, by Sex",
x = "Year",
y = "Suicides per 100k",
color = "Sex") +
theme(legend.position = "none") +
scale_x_continuous(breaks = seq(1985, 2015, 5), minor_breaks = F)
sex_plot
sex_time_plot
country <- data %>%
group_by(country, continent) %>%
summarize(n = n(),
suicide_per_100k = (sum(as.numeric(suicides_no)) / sum(as.numeric(population))) * 100000) %>%
arrange(desc(suicide_per_100k))
country$country <- factor(country$country,
ordered = T,
levels = rev(country$country))
ggplot(country, aes(x = country, y = suicide_per_100k, fill = continent)) +
geom_bar(stat = "identity") +
geom_hline(yintercept = global_average, linetype = 2, color = "grey35", size = 1) +
labs(title = "Global suicides per 100k, by Country",
x = "Country",
y = "Suicides per 100k",
fill = "Continent") +
coord_flip() +
scale_y_continuous(breaks = seq(0, 45, 2)) +
scale_x_discrete("Country", labels =  , position = "bottom") +
theme(legend.position = "bottom")
